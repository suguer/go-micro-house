// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: houseService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HouseServiceClient is the client API for HouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseServiceClient interface {
	Index(ctx context.Context, in *HouseIndexRequest, opts ...grpc.CallOption) (*HouseIndexResponse, error)
	Create(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error)
	Instance(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error)
	Update(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error)
	Remove(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error)
}

type houseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseServiceClient(cc grpc.ClientConnInterface) HouseServiceClient {
	return &houseServiceClient{cc}
}

func (c *houseServiceClient) Index(ctx context.Context, in *HouseIndexRequest, opts ...grpc.CallOption) (*HouseIndexResponse, error) {
	out := new(HouseIndexResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseService/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseServiceClient) Create(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error) {
	out := new(HouseDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseServiceClient) Instance(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error) {
	out := new(HouseDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseService/Instance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseServiceClient) Update(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error) {
	out := new(HouseDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseServiceClient) Remove(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseDetailResponse, error) {
	out := new(HouseDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseServiceServer is the server API for HouseService service.
// All implementations must embed UnimplementedHouseServiceServer
// for forward compatibility
type HouseServiceServer interface {
	Index(context.Context, *HouseIndexRequest) (*HouseIndexResponse, error)
	Create(context.Context, *HouseRequest) (*HouseDetailResponse, error)
	Instance(context.Context, *HouseRequest) (*HouseDetailResponse, error)
	Update(context.Context, *HouseRequest) (*HouseDetailResponse, error)
	Remove(context.Context, *HouseRequest) (*HouseDetailResponse, error)
	mustEmbedUnimplementedHouseServiceServer()
}

// UnimplementedHouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHouseServiceServer struct {
}

func (UnimplementedHouseServiceServer) Index(context.Context, *HouseIndexRequest) (*HouseIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedHouseServiceServer) Create(context.Context, *HouseRequest) (*HouseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHouseServiceServer) Instance(context.Context, *HouseRequest) (*HouseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instance not implemented")
}
func (UnimplementedHouseServiceServer) Update(context.Context, *HouseRequest) (*HouseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHouseServiceServer) Remove(context.Context, *HouseRequest) (*HouseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedHouseServiceServer) mustEmbedUnimplementedHouseServiceServer() {}

// UnsafeHouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseServiceServer will
// result in compilation errors.
type UnsafeHouseServiceServer interface {
	mustEmbedUnimplementedHouseServiceServer()
}

func RegisterHouseServiceServer(s grpc.ServiceRegistrar, srv HouseServiceServer) {
	s.RegisterService(&HouseService_ServiceDesc, srv)
}

func _HouseService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseService/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).Index(ctx, req.(*HouseIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).Create(ctx, req.(*HouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseService_Instance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).Instance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseService/Instance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).Instance(ctx, req.(*HouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).Update(ctx, req.(*HouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).Remove(ctx, req.(*HouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HouseService_ServiceDesc is the grpc.ServiceDesc for HouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HouseService",
	HandlerType: (*HouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _HouseService_Index_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _HouseService_Create_Handler,
		},
		{
			MethodName: "Instance",
			Handler:    _HouseService_Instance_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HouseService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _HouseService_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "houseService.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: houseGroupService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HouseGroupServiceClient is the client API for HouseGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseGroupServiceClient interface {
	Index(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error)
	Create(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error)
	Remove(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error)
	Join(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error)
	Leave(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error)
}

type houseGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseGroupServiceClient(cc grpc.ClientConnInterface) HouseGroupServiceClient {
	return &houseGroupServiceClient{cc}
}

func (c *houseGroupServiceClient) Index(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error) {
	out := new(HouseGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseGroupService/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseGroupServiceClient) Create(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error) {
	out := new(HouseGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseGroupService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseGroupServiceClient) Remove(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error) {
	out := new(HouseGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseGroupService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseGroupServiceClient) Join(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error) {
	out := new(HouseGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseGroupService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseGroupServiceClient) Leave(ctx context.Context, in *HouseGroupRequest, opts ...grpc.CallOption) (*HouseGroupResponse, error) {
	out := new(HouseGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.HouseGroupService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseGroupServiceServer is the server API for HouseGroupService service.
// All implementations must embed UnimplementedHouseGroupServiceServer
// for forward compatibility
type HouseGroupServiceServer interface {
	Index(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error)
	Create(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error)
	Remove(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error)
	Join(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error)
	Leave(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error)
	mustEmbedUnimplementedHouseGroupServiceServer()
}

// UnimplementedHouseGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHouseGroupServiceServer struct {
}

func (UnimplementedHouseGroupServiceServer) Index(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedHouseGroupServiceServer) Create(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHouseGroupServiceServer) Remove(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedHouseGroupServiceServer) Join(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedHouseGroupServiceServer) Leave(context.Context, *HouseGroupRequest) (*HouseGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedHouseGroupServiceServer) mustEmbedUnimplementedHouseGroupServiceServer() {}

// UnsafeHouseGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseGroupServiceServer will
// result in compilation errors.
type UnsafeHouseGroupServiceServer interface {
	mustEmbedUnimplementedHouseGroupServiceServer()
}

func RegisterHouseGroupServiceServer(s grpc.ServiceRegistrar, srv HouseGroupServiceServer) {
	s.RegisterService(&HouseGroupService_ServiceDesc, srv)
}

func _HouseGroupService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseGroupServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseGroupService/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseGroupServiceServer).Index(ctx, req.(*HouseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseGroupService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseGroupServiceServer).Create(ctx, req.(*HouseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseGroupService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseGroupServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseGroupService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseGroupServiceServer).Remove(ctx, req.(*HouseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseGroupService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseGroupServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseGroupService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseGroupServiceServer).Join(ctx, req.(*HouseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseGroupService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseGroupServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HouseGroupService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseGroupServiceServer).Leave(ctx, req.(*HouseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HouseGroupService_ServiceDesc is the grpc.ServiceDesc for HouseGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HouseGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HouseGroupService",
	HandlerType: (*HouseGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _HouseGroupService_Index_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _HouseGroupService_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _HouseGroupService_Remove_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _HouseGroupService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _HouseGroupService_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "houseGroupService.proto",
}

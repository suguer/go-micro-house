// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: contractService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractServiceClient is the client API for ContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractServiceClient interface {
	Index(ctx context.Context, in *ContractIndexRequest, opts ...grpc.CallOption) (*ContractIndexResponse, error)
	Create(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error)
	Instance(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error)
	Update(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error)
	Delete(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error)
}

type contractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractServiceClient(cc grpc.ClientConnInterface) ContractServiceClient {
	return &contractServiceClient{cc}
}

func (c *contractServiceClient) Index(ctx context.Context, in *ContractIndexRequest, opts ...grpc.CallOption) (*ContractIndexResponse, error) {
	out := new(ContractIndexResponse)
	err := c.cc.Invoke(ctx, "/pb.ContractService/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) Create(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error) {
	out := new(ContactDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.ContractService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) Instance(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error) {
	out := new(ContactDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.ContractService/Instance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) Update(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error) {
	out := new(ContactDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.ContractService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) Delete(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error) {
	out := new(ContactDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.ContractService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServiceServer is the server API for ContractService service.
// All implementations must embed UnimplementedContractServiceServer
// for forward compatibility
type ContractServiceServer interface {
	Index(context.Context, *ContractIndexRequest) (*ContractIndexResponse, error)
	Create(context.Context, *ContactRequest) (*ContactDetailResponse, error)
	Instance(context.Context, *ContactRequest) (*ContactDetailResponse, error)
	Update(context.Context, *ContactRequest) (*ContactDetailResponse, error)
	Delete(context.Context, *ContactRequest) (*ContactDetailResponse, error)
	mustEmbedUnimplementedContractServiceServer()
}

// UnimplementedContractServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContractServiceServer struct {
}

func (UnimplementedContractServiceServer) Index(context.Context, *ContractIndexRequest) (*ContractIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedContractServiceServer) Create(context.Context, *ContactRequest) (*ContactDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContractServiceServer) Instance(context.Context, *ContactRequest) (*ContactDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instance not implemented")
}
func (UnimplementedContractServiceServer) Update(context.Context, *ContactRequest) (*ContactDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContractServiceServer) Delete(context.Context, *ContactRequest) (*ContactDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContractServiceServer) mustEmbedUnimplementedContractServiceServer() {}

// UnsafeContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractServiceServer will
// result in compilation errors.
type UnsafeContractServiceServer interface {
	mustEmbedUnimplementedContractServiceServer()
}

func RegisterContractServiceServer(s grpc.ServiceRegistrar, srv ContractServiceServer) {
	s.RegisterService(&ContractService_ServiceDesc, srv)
}

func _ContractService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ContractService/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).Index(ctx, req.(*ContractIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ContractService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).Create(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_Instance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).Instance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ContractService/Instance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).Instance(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ContractService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).Update(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ContractService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).Delete(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractService_ServiceDesc is the grpc.ServiceDesc for ContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ContractService",
	HandlerType: (*ContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _ContractService_Index_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ContractService_Create_Handler,
		},
		{
			MethodName: "Instance",
			Handler:    _ContractService_Instance_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ContractService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContractService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contractService.proto",
}
